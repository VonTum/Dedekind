case 1:
	bits12 = bits11; bits11 = bits10; bits10 = bits9; bits9 = bits8; bits8 = bits7; bits7 = bits6; bits6 = bits5; bits5 = bits4; bits4 = bits3; bits3 = bits2; bits2 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 1), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	curMask = _mm256_slli_epi32(curMask, 1);
	permute1();
	curMask = _mm256_srli_epi32(curMask, 1);
	bits1 = bits2; bits2 = bits3; bits3 = bits4; bits4 = bits5; bits5 = bits6; bits6 = bits7; bits7 = bits8; bits8 = bits9; bits9 = bits10; bits10 = bits11; bits11 = bits12; 
	break;
case 2:
	bits12 = bits10; bits11 = bits9; bits10 = bits8; bits9 = bits7; bits8 = bits6; bits7 = bits5; bits6 = bits4; bits5 = bits3; bits4 = bits2; bits3 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 2), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	bits2 = _mm256_and_si256(_mm256_srli_epi32(data, 2), curMask);
	curMask = _mm256_slli_epi32(curMask, 2);
	permute2();
	curMask = _mm256_srli_epi32(curMask, 2);
	bits1 = bits3; bits2 = bits4; bits3 = bits5; bits4 = bits6; bits5 = bits7; bits6 = bits8; bits7 = bits9; bits8 = bits10; bits9 = bits11; bits10 = bits12; 
	break;
case 3:
	bits12 = bits9; bits11 = bits8; bits10 = bits7; bits9 = bits6; bits8 = bits5; bits7 = bits4; bits6 = bits3; bits5 = bits2; bits4 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 3), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	bits2 = _mm256_and_si256(_mm256_srli_epi32(data, 2), curMask);
	bits3 = _mm256_and_si256(_mm256_srli_epi32(data, 3), curMask);
	curMask = _mm256_slli_epi32(curMask, 3);
	permute3();
	curMask = _mm256_srli_epi32(curMask, 3);
	bits1 = bits4; bits2 = bits5; bits3 = bits6; bits4 = bits7; bits5 = bits8; bits6 = bits9; bits7 = bits10; bits8 = bits11; bits9 = bits12; 
	break;
case 4:
	bits12 = bits8; bits11 = bits7; bits10 = bits6; bits9 = bits5; bits8 = bits4; bits7 = bits3; bits6 = bits2; bits5 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 4), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	bits2 = _mm256_and_si256(_mm256_srli_epi32(data, 2), curMask);
	bits3 = _mm256_and_si256(_mm256_srli_epi32(data, 3), curMask);
	bits4 = _mm256_and_si256(_mm256_srli_epi32(data, 4), curMask);
	curMask = _mm256_slli_epi32(curMask, 4);
	permute4();
	curMask = _mm256_srli_epi32(curMask, 4);
	bits1 = bits5; bits2 = bits6; bits3 = bits7; bits4 = bits8; bits5 = bits9; bits6 = bits10; bits7 = bits11; bits8 = bits12; 
	break;
case 5:
	bits12 = bits7; bits11 = bits6; bits10 = bits5; bits9 = bits4; bits8 = bits3; bits7 = bits2; bits6 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 5), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	bits2 = _mm256_and_si256(_mm256_srli_epi32(data, 2), curMask);
	bits3 = _mm256_and_si256(_mm256_srli_epi32(data, 3), curMask);
	bits4 = _mm256_and_si256(_mm256_srli_epi32(data, 4), curMask);
	bits5 = _mm256_and_si256(_mm256_srli_epi32(data, 5), curMask);
	curMask = _mm256_slli_epi32(curMask, 5);
	permute5();
	curMask = _mm256_srli_epi32(curMask, 5);
	bits1 = bits6; bits2 = bits7; bits3 = bits8; bits4 = bits9; bits5 = bits10; bits6 = bits11; bits7 = bits12; 
	break;
case 6:
	bits12 = bits6; bits11 = bits5; bits10 = bits4; bits9 = bits3; bits8 = bits2; bits7 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 6), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	bits2 = _mm256_and_si256(_mm256_srli_epi32(data, 2), curMask);
	bits3 = _mm256_and_si256(_mm256_srli_epi32(data, 3), curMask);
	bits4 = _mm256_and_si256(_mm256_srli_epi32(data, 4), curMask);
	bits5 = _mm256_and_si256(_mm256_srli_epi32(data, 5), curMask);
	bits6 = _mm256_and_si256(_mm256_srli_epi32(data, 6), curMask);
	curMask = _mm256_slli_epi32(curMask, 6);
	permute6();
	curMask = _mm256_srli_epi32(curMask, 6);
	bits1 = bits7; bits2 = bits8; bits3 = bits9; bits4 = bits10; bits5 = bits11; bits6 = bits12; 
	break;
case 7:
	bits12 = bits5; bits11 = bits4; bits10 = bits3; bits9 = bits2; bits8 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 7), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	bits2 = _mm256_and_si256(_mm256_srli_epi32(data, 2), curMask);
	bits3 = _mm256_and_si256(_mm256_srli_epi32(data, 3), curMask);
	bits4 = _mm256_and_si256(_mm256_srli_epi32(data, 4), curMask);
	bits5 = _mm256_and_si256(_mm256_srli_epi32(data, 5), curMask);
	bits6 = _mm256_and_si256(_mm256_srli_epi32(data, 6), curMask);
	bits7 = _mm256_and_si256(_mm256_srli_epi32(data, 7), curMask);
	curMask = _mm256_slli_epi32(curMask, 7);
	permute7();
	curMask = _mm256_srli_epi32(curMask, 7);
	bits1 = bits8; bits2 = bits9; bits3 = bits10; bits4 = bits11; bits5 = bits12; 
	break;
case 8:
	bits12 = bits4; bits11 = bits3; bits10 = bits2; bits9 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 8), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	bits2 = _mm256_and_si256(_mm256_srli_epi32(data, 2), curMask);
	bits3 = _mm256_and_si256(_mm256_srli_epi32(data, 3), curMask);
	bits4 = _mm256_and_si256(_mm256_srli_epi32(data, 4), curMask);
	bits5 = _mm256_and_si256(_mm256_srli_epi32(data, 5), curMask);
	bits6 = _mm256_and_si256(_mm256_srli_epi32(data, 6), curMask);
	bits7 = _mm256_and_si256(_mm256_srli_epi32(data, 7), curMask);
	bits8 = _mm256_and_si256(_mm256_srli_epi32(data, 8), curMask);
	curMask = _mm256_slli_epi32(curMask, 8);
	permute8();
	curMask = _mm256_srli_epi32(curMask, 8);
	bits1 = bits9; bits2 = bits10; bits3 = bits11; bits4 = bits12; 
	break;
case 9:
	bits12 = bits3; bits11 = bits2; bits10 = bits1; 
	bits0 = _mm256_sub_epi32(_mm256_slli_epi32(curMask, 9), curMask);
	bits1 = _mm256_and_si256(data, curMask);
	bits2 = _mm256_and_si256(_mm256_srli_epi32(data, 2), curMask);
	bits3 = _mm256_and_si256(_mm256_srli_epi32(data, 3), curMask);
	bits4 = _mm256_and_si256(_mm256_srli_epi32(data, 4), curMask);
	bits5 = _mm256_and_si256(_mm256_srli_epi32(data, 5), curMask);
	bits6 = _mm256_and_si256(_mm256_srli_epi32(data, 6), curMask);
	bits7 = _mm256_and_si256(_mm256_srli_epi32(data, 7), curMask);
	bits8 = _mm256_and_si256(_mm256_srli_epi32(data, 8), curMask);
	bits9 = _mm256_and_si256(_mm256_srli_epi32(data, 9), curMask);
	curMask = _mm256_slli_epi32(curMask, 9);
	permute9();
	curMask = _mm256_srli_epi32(curMask, 9);
	bits1 = bits10; bits2 = bits11; bits3 = bits12; 
	break;
